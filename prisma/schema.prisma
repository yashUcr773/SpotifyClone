// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider    =   "postgresql"
    url         =   env("DATABASE_URL")
}

model Account {
    id                      String       @id @default(cuid())
    userId                  String  
    type                    String  
    provider                String  
    providerAccountId       String  
    refresh_token           String?      @db.Text
    access_token            String?      @db.Text
    expires_at              Int?    
    token_type              String? 
    scope                   String? 
    id_token                String?      @db.Text
    session_state           String?

    user                    User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id                  String          @id @default(cuid())
    name                String?
    email               String?         @unique
    emailVerified       DateTime?       
    image               String?
    hashedPassword      String?
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt

    accounts            Account[]
    
    uploadedSongs       Song[]

    playlists           Playlist[]
}

model Song {
    id                  String          @id @default(cuid())
    createdAt           DateTime        @default(now())
    title               String
    song_path           String
    image_path          String
    author              String

    uploaderId          String
    uploader            User            @relation(fields: [uploaderId], references: [id], onDelete:Cascade)

    playlist            Playlist[]
}

model Playlist {
    id                  String          @id @default(cuid())
    name                String
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt
    description         String          @default("")
    image_path          String          @default("")

    userId              String
    user                User            @relation(fields: [userId], references: [id], onDelete:Cascade)

    songs               Song[]
}